{
  "kind": "NitroModule",
  "definitions": [
    {
      "kind": "StructDefinition",
      "name": "SQ0Cols",
      "types": [
        {
          "name": "col2",
          "type": {
            "kind": "StringType"
          }
        }
      ]
    },
    {
      "kind": "FunctionDefinition",
      "name": "(db *Database) QuerySQ0",
      "ret": {
        "kind": "StringType"
      },
      "parameters": [
        {
          "name": "id",
          "type": {
            "kind": "StringType"
          }
        }
      ],
      "__ret": "[]SQ0Cols",
      "expression": {
        "kind": "BlockExpression",
        "expressions": [
          {
            "kind": "RawExpression",
            "source": "  var obj SQ0Cols\n  var objects []SQ0Cols\n\n  rows, err := db.conn.Query(`select \"col2\"from \"my_table\"where \"id\" = $1`, id)\n  if err != nil {\n    panic(\"bad query: \" + err.Error())\n  }\n  defer rows.Close()\n  \n  for rows.Next() {\n    rows.Scan(&obj.col2)\n    objects = append(objects, obj)\n  }\n  \n  return objects\n"
          }
        ]
      }
    },
    {
      "kind": "FunctionDefinition",
      "name": "page",
      "parameters": [
        {
          "name": "children",
          "type": {
            "kind": "StringType"
          }
        }
      ],
      "expression": {
        "kind": "BlockExpression",
        "expressions": [
          {
            "kind": "RawExpression",
            "nodeId": 2,
            "source": "ret := [][]byte{}\n\n\nreturn ret;\n"
          }
        ],
        "nodeId": 1
      },
      "ret": {
        "kind": "StringType"
      },
      "nodeId": 0,
      "__ret": "[][]byte"
    },
    {
      "kind": "FunctionDefinition",
      "name": "component",
      "parameters": [
        {
          "name": "children",
          "type": {
            "kind": "StringType"
          }
        }
      ],
      "expression": {
        "kind": "BlockExpression",
        "expressions": [
          {
            "kind": "RawExpression",
            "nodeId": 12,
            "source": "ret := [][]byte{}\n\nreturn ret;\n"
          }
        ],
        "nodeId": 11
      },
      "ret": {
        "kind": "StringType"
      },
      "nodeId": 10,
      "__ret": "[][]byte"
    },
    {
      "kind": "FunctionDefinition",
      "name": "headline",
      "parameters": [
        {
          "name": "children",
          "type": {
            "kind": "StringType"
          }
        }
      ],
      "expression": {
        "kind": "BlockExpression",
        "expressions": [
          {
            "kind": "RawExpression",
            "nodeId": 18,
            "source": "ret := [][]byte{}\n\nreturn ret;\n"
          }
        ],
        "nodeId": 17
      },
      "ret": {
        "kind": "StringType"
      },
      "nodeId": 16,
      "__ret": "[][]byte"
    },
    {
      "kind": "HTTPDefinition",
      "verb": "get",
      "endpoint": {
        "paths": [
          {
            "kind": "SimpleHTTPPath",
            "path": "click"
          }
        ]
      },
      "expression": {
        "kind": "BlockExpression",
        "expressions": [
          {
            "kind": "RawExpression",
            "nodeId": 23,
            "source": "data := [][]byte{}; return stream_component(c, 3, data)"
          }
        ],
        "nodeId": 22
      },
      "nodeId": 21
    },
    {
      "kind": "HTTPDefinition",
      "verb": "get",
      "endpoint": {
        "paths": [
          {
            "kind": "SimpleHTTPPath",
            "path": "nest"
          }
        ]
      },
      "expression": {
        "kind": "BlockExpression",
        "expressions": [
          {
            "kind": "RawExpression",
            "nodeId": 27,
            "source": "data := [][]byte{}; data = append(data, page()...); return stream_component(c, 4, data)"
          }
        ],
        "nodeId": 26
      },
      "nodeId": 25
    },
    {
      "kind": "HTTPDefinition",
      "verb": "get",
      "endpoint": {
        "paths": [
          {
            "kind": "SimpleHTTPPath",
            "path": "nest"
          },
          {
            "kind": "SimpleHTTPPath",
            "path": "nest"
          }
        ]
      },
      "expression": {
        "kind": "BlockExpression",
        "expressions": [
          {
            "kind": "RawExpression",
            "nodeId": 34,
            "source": "data := [][]byte{}; data = append(data, page()...); return stream_component(c, 6, data)"
          }
        ],
        "nodeId": 33
      },
      "nodeId": 32
    },
    {
      "kind": "HTTPDefinition",
      "verb": "get",
      "endpoint": {
        "paths": [
          {
            "kind": "SimpleHTTPPath",
            "path": "nest"
          },
          {
            "kind": "SimpleHTTPPath",
            "path": "nest"
          },
          {
            "kind": "SimpleHTTPPath",
            "path": "nest"
          }
        ]
      },
      "expression": {
        "kind": "BlockExpression",
        "expressions": [
          {
            "kind": "RawExpression",
            "nodeId": 43,
            "source": "data := [][]byte{}; data = append(data, page()...); return stream_component(c, 9, data)"
          }
        ],
        "nodeId": 42
      },
      "nodeId": 41
    },
    {
      "kind": "HTTPDefinition",
      "verb": "get",
      "endpoint": {
        "paths": [
          {
            "kind": "SimpleHTTPPath",
            "path": "db"
          }
        ]
      },
      "expression": {
        "kind": "BlockExpression",
        "expressions": [
          {
            "kind": "RawExpression",
            "nodeId": 53,
            "source": "data := [][]byte{}; data = append(data, page()...); return stream_component(c, 13, data)"
          }
        ],
        "nodeId": 52
      },
      "nodeId": 51
    },
    {
      "kind": "HTTPDefinition",
      "verb": "get",
      "endpoint": {
        "paths": [
          {
            "kind": "SimpleHTTPPath",
            "path": "row"
          },
          {
            "kind": "WildcardHTTPPath",
            "name": "id"
          }
        ]
      },
      "expression": {
        "kind": "BlockExpression",
        "expressions": [
          {
            "kind": "LetExpression",
            "name": "rows",
            "value": {
              "kind": "RawExpression",
              "source": "db.QuerySQ0(id)"
            },
            "nodeId": 60
          },
          {
            "kind": "RawExpression",
            "source": "col2 := rows[0].col2",
            "nodeId": 62
          },
          {
            "kind": "RawExpression",
            "nodeId": 63,
            "source": "data := [][]byte{}; data = append(data, []byte(col2));return stream_component(c, 15, data)"
          }
        ],
        "nodeId": 59
      },
      "nodeId": 58
    }
  ],
  "nodeId": 66
}