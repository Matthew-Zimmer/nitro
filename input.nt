
#go_import 
import raw_uuid "github.com/google/uuid"
#end

#go
func uuid() string {
  return raw_uuid.New().String() 
}
#end

declare func uuid(): str intrinsic

declare func html(children: html, _: str): html intrinsic
declare func head(children: html, _: str): html intrinsic
declare func title(children: html, _: str): html intrinsic
declare func body(children: html, _: str): html intrinsic
declare func h1(children: html, _: str): html intrinsic
declare func div(children: html, _: str): html intrinsic
declare func style(children: html, _: str): html intrinsic
declare func script(children: html, _: str): html intrinsic
declare func a(children: html, _: str): html intrinsic
declare func input(children: html, _: str): html intrinsic
declare func form(children: html, _: str): html intrinsic
declare func fieldset(children: html, _: str): html intrinsic
declare func button(children: html, _: str): html intrinsic
declare func label(children: html, _: str): html intrinsic

struct item {
  id: str,
  name: str,
}

table item = item

func page(title: str, children: html): html
  <html>
    <head>
      <script src="https://unpkg.com/htmx.org@1.9.11"></script>
      <script src="https://cdn.tailwindcss.com"></script>
      <title>
        ${title}
      </title>
    </head>
    <body hx-boost="true">
      ${children}
    </body>
  </html>

func row(children: html): html
  <div class="flex flex-row gap-2">
    ${children}
  </div>

get / ()
  <page title="hello">
    <h1>
      Nitro Rules
    </h1>
  </page>

get /${msg} ()
  <page title=${msg}>
    <h1>
      Nitro Rules
    </h1>
  </page>

get /items ()
  <page title="items">  
    <a href="/item/new">Create New Item</a>
    <div>
      ${for x in select id, name from item {
        <row>
          <h1>${x.name}</h1>
          <button hx-delete="/item/${x.id}" hx-target="closest div" hx-swap="delete" hx-confirm="Are you sure want to delete this?">
            Delete
          </button>
          <a href="/item/${x.id}/edit">
            Edit
          </a>
        </row>
      }}
    </div>
  </page>

get /item/new ()
  <page title="Create Item">
    <form hx-post="/item" class="flex flex-col gap-2 border p-10 border-black" hx-push-url="/items">
      <h1>Create new Item</h1>
      <fieldset class="flex flex-col gap-1 invalid:after:content-[attr(err)] after:text-red-500" err="Please enter a name">
        <label for="name">Name</label>
        <input id="name" class="border p-2 invalid:border-red-500" name="name" required="true" />
      </fieldset>
      <button>
        Create
      </button>
    </form>
  </page>


func textfield(label: str, name: str, error_message: str): html
  <fieldset class="flex flex-col gap-1 invalid:after:content-[attr(err)] after:text-red-500" err=${error_message}>
    <label for=${name}>${label}</label>
    <input id=${name} class="border p-2 invalid:border-red-500" name=${name} required="true" />
  </fieldset>

get /item/${id}/edit ()
  <page title="App">
    <form hx-put="/item/${id}" class="flex flex-col gap-2 border p-10 border-black">
      <h1>Edit Existing Item</h1>
      <textfield label="Name" name="name" error_message="Please enter a name" />
      <button>
        Submit
      </button>
    </form>
  </page>

declare struct create_item_input {
  name: str
}

#go
type create_item_input = struct  {
  Name string `form:"name" validate:"required"`
}
#end

post /item (payload: create_item_input) {
  insert into item
    (id, name)
  values 
    (${uuid()}, ${payload.name})
}


declare func sql_op_eq(l: str, r: str): bool intrinsic

delete /item/${id} () {
  delete from item where id = ${id}
}
